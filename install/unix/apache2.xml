<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: e51792efe0f103ec8724ad199524d7543610c978 Maintainer: mproshchuk Status: ready -->
<sect1 xml:id="install.unix.apache2" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Apache 2.x на Unix системах</title>
 
 <para>
  Цей розділ містить замітки та підказки щодо встановлення Apache 2.x з PHP в
  системи Unix.
 </para>

 &warn.apache2.compat;
     
 <para>
  <link xlink:href="&url.apache2.docs;">Документація на сайті Apache</link>
  є найбільш авторитетним джерелом інформації про сервер Apache 2.x.
  Там можна знайти більше інформації про параметри його інсталяції.
 </para>
 
 <para>
  Найновішу версію HTTP-сервера Apache можна отримати на
  <link xlink:href="&url.apache;">сторінці завантаження Apache</link>.
  Також треба завантажити потрібну версію PHP (див. навігаційну панель вгорі).
  Тут є лише короткий опис базового встановлення Apache 2.x та PHP. Детальнішу
  інформацію можна прочитати в
  <link xlink:href="&url.apache2.docs;">Документації Apache</link>.
  Зазначення конкретного номера версії навмисно оминається, щоб не плутати
  користувачів наведених тут інструкцій. Внизу в прикладах, 'NN' потрібно
  замінити версією Apache, яка буде використовуватись.
 </para>
 
 <para>
  На даний момент є дві версії Apache 2.x - це 2.2 та 2.4.
  Хоча є певні причини для вибору однієї чи іншої версії, але 2.4 є зараз
  найновішою та рекомендованою. Тим не менш, наведені тут інструкції мають
  працювати для обох версій. Варто зазначити, що Apache httpd 2.2 офіційно не
  підтримується і для нього не випускаються нові розробки чи виправлення.
 </para>
 
 <orderedlist>
  <listitem>
   <para>
    Завантаживши HTTP-сервер Apache за посиланням вище, його необхідно
    розпакувати:
   </para>
     
   <informalexample>
    <screen>
<![CDATA[
tar -xzf httpd-2.x.NN.tar.gz
]]>
    </screen>
   </informalexample>
  </listitem>
  <listitem>
   <para>
    Таким же способом необхідно розпакувати файли з початковим кодом PHP:
   </para>
   <informalexample>
    <screen>
<![CDATA[
tar -xzf php-NN.tar.gz
]]>
    </screen>
   </informalexample>
  </listitem>
  <listitem>
   <para>
    Далі потрібно зібрати та встановити Apache. Докладніші рекомендації є в
    документації щодо встановлення Apache.
   </para>

   <informalexample>
    <screen>
<![CDATA[
cd httpd-2_x_NN
./configure --enable-so
make
make install
]]>
    </screen>
   </informalexample>
  </listitem>
  <listitem>
   <para>
    Тепер Apache 2.x.NN доступний за адресою /usr/local/apache2, зі
    встановленим стандартним модулем MPM prefork та конфігурацією, яка дозволяє
    додавати інші потрібні модулі. Для перевірки інсталяції використовується
    звичайна процедура запуску сервера Apache, наприклад:
    <informalexample>
     <screen>
<![CDATA[
/usr/local/apache2/bin/apachectl start
]]>
     </screen>
    </informalexample>
    далі треба зупинити сервер, щоб перейти до налаштування PHP:
    <informalexample>
     <screen>
<![CDATA[
/usr/local/apache2/bin/apachectl stop
]]>
     </screen>
    </informalexample>
   </para>
  </listitem>
  <listitem>
   <para>
    Тепер треба налаштувати та зібрати PHP. Наприклад, визначити, які саме
    розширення будуть включені в PHP. Для перегляду списку доступних
    параметрів необхідно запустити <command>./configure --help</command>. В
    цьому прикладі виконується проста конфігурація Apache 2 з підтримкою MySQL.
   </para>

   <para>
    Якщо Apache було зібрано вручну, як описано вище, в наступному прикладі
    шлях буде відповідати розташуванню <command>apxs</command>, але якщо Apache
    встановлено по-іншому, то потрібно змінити шлях до <command>apxs</command>.
    Варто зауважити, що деякі дистрибутиви можуть перейменувати
    <command>apxs</command> на <command>apxs2</command>.
   </para>
   <informalexample>
    <screen>
<![CDATA[
cd ../php-NN
./configure --with-apxs2=/usr/local/apache2/bin/apxs --with-pdo-mysql
make
make install
]]>
    </screen>
   </informalexample>

   <para>
    Для зміни конфігурації після інсталяції, потрібно заново виконати кроки:
    <command>configure</command>, <command>make</command> та <command>make
    install</command>. Після цього перезапустити Apache, щоб зміни були
    застосовані. Перекомпільовувати Apache не потрібно.
   </para>
 
   <para>
    Варто зауважити, що якщо не сказано іншого, то команда <command>make
    install</command> також встановлює
    <link xlink:href="&url.php.pear;">PEAR</link>, різноманітні інструменти
    PHP, як от <link linkend="install.pecl.phpize">phpize</link>, PHP CLI та
    інші.
   </para>

  </listitem>
  <listitem>
   <para>
    Налаштування <filename>php.ini</filename>.
   </para>
   
   <informalexample>
    <screen>
<![CDATA[
cp php.ini-development /usr/local/lib/php.ini
]]>
    </screen>
   </informalexample>

   <para>
    Можна редагувати файл <literal>.ini</literal>, додаючи потрібні опції PHP.
    Для розміщення <filename>php.ini</filename> в іншому місці
    використовується опція
    <literal>--with-config-file-path=/some/path</literal> на 5-му кроці.
   </para>
  
   <para>
    Якщо буде обрано <filename>php.ini-production</filename>, краще прочитати
    список відмінностей між файлами <literal>.ini</literal>, щоб розуміти як це
    вплине на поведінку PHP.
   </para>
  </listitem>

  <listitem>
   <para>
    Відредагуємо <filename>httpd.conf</filename>, щоб завантажувався модуль
    PHP. Шлях, який зазначено праворуч від оператора
    <literal>LoadModule</literal>, повинен вказувати на розташування модуля PHP
    у системі. Згадана раніше команда <command>make install</command> повинна
    це робити, але краще перевірити.
   </para>

   <informalexample>
    <para>
     Для PHP 8:
    </para>

    <programlisting role="apache-conf">
<![CDATA[
LoadModule php_module modules/libphp.so
]]>
    </programlisting>
   </informalexample>

   <informalexample>
    <para>
     Для PHP 7:
    </para>
    <programlisting role="apache-conf">
<![CDATA[
LoadModule php7_module modules/libphp7.so
]]>
    </programlisting>
   </informalexample>
  </listitem>

  <listitem>
   <para>
    Скажемо Apache обробляти файли з певним закінченням через PHP. Наприклад, з
    <literal>.php</literal>. Замість того, щоб використати лише директиву
    Apache <literal>AddType</literal>, краще не дати обробити через PHP
    потенційно небезпечні завантаження та створені файли на кшталт
    <filename>exploit.php.jpg</filename>. Використовуючи наступний приклад,
    можна додати будь-яке (і не одне) закінчення, яке потрібно обробляти через
    PHP. Тут <literal>.php</literal> вказано суто для прикладу.
   </para>
   <informalexample>
    <programlisting role="apache-conf">
<![CDATA[
<FilesMatch \.php$>
    SetHandler application/x-httpd-php
</FilesMatch>
]]>
    </programlisting>
   </informalexample>
   <para>
    Або ж, якщо треба дозволити PHP обробляти файли <literal>.php</literal>,
    <literal>.php2</literal>, <literal>.php3</literal>,
    <literal>.php4</literal>, <literal>.php5</literal>,
    <literal>.php6</literal> та <literal>.phtml</literal>, але ніякі інші,
    то можна використати такий код:
   </para>

   <informalexample>
    <programlisting role="apache-conf">
<![CDATA[
<FilesMatch "\.ph(p[2-6]?|tml)$">
    SetHandler application/x-httpd-php
</FilesMatch>
]]>
    </programlisting>
   </informalexample>

   <para>
    Для обробки <literal>.phps</literal> через "php source filter" з метою
    показувати їх вміст з підсвічуванням синтаксису, використовується таке:
   </para>

   <informalexample>
    <programlisting role="apache-conf">
<![CDATA[
<FilesMatch "\.phps$">
    SetHandler application/x-httpd-php-source
</FilesMatch>
]]>
    </programlisting>
   </informalexample>

   <para>
    Можна використовувати модуль <literal>mod_rewrite</literal>, щоб дозволити
    показувати початковий код з підсвічуванням синтаксису в файлах із
    закінченням <literal>.php</literal> без необхідності переназивати їх чи
    копіювати їхній код до файлів <literal>.phps</literal>:
   </para>

   <informalexample>
    <programlisting role="apache-conf">
<![CDATA[
RewriteEngine On
RewriteRule (.*\.php)s$ $1 [H=application/x-httpd-php-source]
]]>
    </programlisting>
   </informalexample>

   <para>
    Не слід вмикати "php source filter" у виробничому середовищі, де він може
    розкрити конфіденційну або іншу важливу інформацію, розміщену в коді.
   </para>

  </listitem>

  <listitem>
   <para>
    Краще застосовувати стандартну процедуру запуску сервера Apache:
   </para>

   <informalexample>
    <screen>
<![CDATA[
/usr/local/apache2/bin/apachectl start
]]>
    </screen>
   </informalexample>

   <para>АБО:</para>

   <informalexample>
    <screen>
<![CDATA[
service httpd restart
]]>
    </screen>
   </informalexample>
  </listitem>
 </orderedlist>

 <para>
  Дотримуючись зазначених вище кроків можна запустити вебсервер Apache2 з
  підтримкою PHP як модуля <literal>SAPI</literal>. Звичайно, є значно більше
  параметрів, доступних для Apache та PHP. Більше інформації можна отримати,
  ввівши в консолі <command>./configure --help</command> в кореневих теках
  початкових файлів.
 </para>

 <para>
  Apache можна зробити багатопотоковим, вибравши <filename>worker</filename>
  MPM замість стандартного <filename>prefork</filename> MPM під час збирання
  Apache, додавши наступний параметр до <command>./configure</command> на 3-му
  кроці:
 </para>

 <informalexample>
  <screen>
<![CDATA[
--with-mpm=worker
]]>
  </screen>
 </informalexample>

 <para>
  Не варто бездумно використовувати цю опцію, а тільки, якщо відомо про всі
  наслідки такого рішення. В документації для Apache стосовно
  <link xlink:href="&url.apache2.mpm;">модулів MPM</link> значно детальніше
  розкрита ця тема.
 </para>
 <note>
  <para>
   У розділі <link linkend="faq.installation.apache.multiviews">ЧаПи про Apache
   MultiViews</link> обговорено використання цієї опції разом з PHP.
  </para>
 </note>
 <note>
  <para>
   Щоб зібрати версію багатопотокового Apache, цільова система повинна мати
   підтримку потоків. В такому разі PHP потрібно також збирати з Zend Thread
   Safety (ZTS). Цю конфігурацію підтримують не всі розширення. Рекомендовано
   встановлювати Apache зі стандартним модулем <filename>prefork</filename> MPM.
  </para>
 </note>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
