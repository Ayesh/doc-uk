<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: f80105b4fc1196bd8d5fecb98d686b580b1ff65d Maintainer: mproshchuk Status: ready -->
<appendix xml:id="filters" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Список доступних фільтрів</title>
 <para>
  Нижче подано список декількох вбудованих потокових фільтрів для використання
  з <function>stream_filter_append</function>. В раніших версіях PHP може бути
  більше чи менше фільтрів, ніж описано тут.
 </para>

 <para>
  Варто відзначити певну асиметрію між функціями
  <function>stream_filter_append</function>
  та <function>stream_filter_prepend</function>.  
  Кожен потік в PHP містить невеликий <emphasis>буфер читання</emphasis>, у
  якому отримані від файлової системи або інших ресурсів блоки даних
  зберігаються в такому порядку, щоб обробляти дані якомога швидше.
  Як тільки дані завантажуються з ресурсу у внутрішній буфер потоку, то
  негайно передаються для обробки закріпленими за потоком фільтрами, незалежно
  від готовності скрипта приймати дані. Якщо фільтр закріплено за допомогою
  <emphasis>першої функції</emphasis>, то отримані в буфер дані пройдуть через
  фільтр одразу, таким чином їхнє перебування в буфері буде прозорим. Якщо ж
  фільтр закріплено <emphasis>другою функцією</emphasis>, то дані
  <emphasis>НЕ</emphasis> пройдуть через фільтр одразу, а лише перед тим, коли
  буфер читання отримає наступний блок даних з ресурсу.
 </para>

 <para>
  Для отримання списку підтримуваних фільтрів використовується функція
  <function>stream_get_filters</function>.
 </para>

 <section xml:id="filters.string">
  <title>Рядкові фільтри</title>

  <simpara>
   Кожен із цих фільтрів виконує саме те, що випливає з назви та відповідає
   поведінці вбудованої в PHP функції обробки рядків. Докладніша інформація
   щодо певного фільтру є на сторінці посібника для відповідної функції.
  </simpara>

  <section xml:id="filters.string.rot13">
   <title>string.rot13</title>
   <simpara>
    Використання цього фільтру еквівалентне обробці всіх даних потоку функцією
    <function>str_rot13</function>.
   </simpara>
   <example>
    <title>string.rot13</title>
    <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'string.rot13');
fwrite($fp, "This is a test.\n");
/* Виводить:  Guvf vf n grfg.   */
?>
]]>
    </programlisting>
   </example>
  </section>

  <section xml:id="filters.string.toupper">
   <title>string.toupper</title>
   <simpara>
    Використання цього фільтру еквівалентне обробці всіх даних потоку функцією
    <function>strtoupper</function>.
   </simpara>
   <example>
    <title>string.toupper</title>
    <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'string.toupper');
fwrite($fp, "This is a test.\n");
/* Виводить:  THIS IS A TEST.   */
?>
]]>
    </programlisting>
   </example>
  </section>

  <section xml:id="filters.string.tolower">
   <title>string.tolower</title>
   <simpara>
    Використання цього фільтру еквівалентне обробці всіх даних потоку функцією
    <function>strtolower</function>.
   </simpara>
   <example>
    <title>string.tolower</title>
    <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'string.tolower');
fwrite($fp, "This is a test.\n");
/* Виводить:  this is a test.   */
?>
]]>
    </programlisting>
   </example>
  </section>

  <section xml:id="filters.string.strip_tags">
   <title>string.strip_tags</title>
   <simpara>
    Використання цього фільтру еквівалентне обробці всіх потокових даних
    функцією <function>strip_tags</function>. Він приймає параметр у двох
    формах: або рядок, що містить перелік тегів, тобто як другий параметр
    функції <function>strip_tags</function>, або масив з назвами тегів.
   </simpara>
   <para>
    &warn.deprecated.feature-7-3-0;
   </para>
   <example>
    <title>string.strip_tags</title>
    <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'string.strip_tags', STREAM_FILTER_WRITE, "<b><i><u>");
fwrite($fp, "<b>жирний текст</b> збільшено до <h1>заголовка першого рівня</h1>\n");
fclose($fp);
/* Виводить:  жирний текст збільшено до заголовка першого рівня   */

$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'string.strip_tags', STREAM_FILTER_WRITE, array('b','i','u'));
fwrite($fp, "<b>жирний текст</b> збільшено до <h1>заголовка першого рівня</h1>\n");
fclose($fp);
/* Виводить:  жирний текст збільшено до заголовка першого рівня   */
?>
]]>
    </programlisting>
   </example>
  </section>
 </section>

 <section xml:id="filters.convert">
  <title>Фільтри перетворення</title>

  <simpara>
   Як і фільтри string.*, фільтри convert.* виконують дії відповідно до своєї
   назви. Докладніша інформація щодо певного фільтру є на сторінці посібника
   для відповідної функції.
  </simpara>

  <section xml:id="filters.convert.base64">
   <title>convert.base64-encode та convert.base64-decode</title>
   <simpara>
    Використання цих фільтрів еквівалентне обробці всіх потокових даних
    функціями <function>base64_encode</function> та
    <function>base64_decode</function> відповідно.
    <literal>convert.base64-encode</literal> підтримує параметри у вигляді
    асоціативного масиву. Якщо дано <parameter>line-length</parameter>, то
    вивід base64 буде поділено на відрізки з довжиною
    <parameter>line-length</parameter> символів кожен. Якщо дано
    <parameter>line-break-chars</parameter>, то кожен відрізок буде розділений
    заданими символами. Ці памаметри дають той самий ефект при використанні
    <function>base64_encode</function> із <function>chunk_split</function>.
   </simpara>
   <example>
    <title>
     convert.base64-encode та convert.base64-decode
    </title>
    <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'convert.base64-encode');
fwrite($fp, "This is a test.\n");
fclose($fp);
/* Виводить:  VGhpcyBpcyBhIHRlc3QuCg==  */

$param = array('line-length' => 8, 'line-break-chars' => "\r\n");
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'convert.base64-encode', STREAM_FILTER_WRITE, $param);
fwrite($fp, "This is a test.\n");
fclose($fp);
/* ВИводить:  VGhpcyBp
           :  cyBhIHRl
           :  c3QuCg==  */

$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'convert.base64-decode');
fwrite($fp, "VGhpcyBpcyBhIHRlc3QuCg==");
fclose($fp);
/* Виводить:  This is a test.  */
?>
]]>
    </programlisting>
   </example>
  </section>

  <section xml:id="filters.covert.quoted-printable">
   <title>
       convert.quoted-printable-encode та convert.quoted-printable-decode
   </title>
   <simpara>
    Використання фільтру для декодування еквівалентне обробці всіх потокових
    даних функцією <function>quoted_printable_decode</function>.
    Немає еквівалентної функції до <literal>convert.quoted-printable-encode</literal>.
    <literal>convert.quoted-printable-encode</literal> підримує параметри,
    подані як асоціативний масив. В додаток до параметрів, підтримуваних
    фунцією <literal>convert.base64-encode</literal>,
    <literal>convert.quoted-printable-encode</literal> також підтримує логічні
    аргументи <parameter>binary</parameter> і
    <parameter>force-encode-first</parameter>.
    <literal>convert.base64-decode</literal> підтримує тільки параметр
    <parameter>line-break-chars</parameter> як підказку для очищення
    закодованих даних.
   </simpara>
   <example>
    <title>
     convert.quoted-printable-encode та convert.quoted-printable-decode
    </title>
    <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'convert.quoted-printable-encode');
fwrite($fp, "This is a test.\n");
/* Виводить:  =This is a test.=0A  */
?>
]]>
    </programlisting>
   </example>
  </section>

  <section xml:id="filters.convert.iconv">
   <title>convert.iconv.*</title>
   <simpara>
    Фільтри <literal>convert.iconv.*</literal> доступні, якщо увімкнена
    підтримка <link linkend="book.iconv">iconv</link>, а їхнє використання
    еквівалентне обробці всіх потокових даних функціями
    <function>iconv</function>. Ці фільтри не підтримують параметрів, та
    натомість містять у своїх назвах кодування для вхідих і вихідних даних:
    <literal>convert.iconv.&lt;input-encoding&gt;.&lt;output-encoding&gt;</literal>
    або
    <literal>convert.iconv.&lt;input-encoding&gt;/&lt;output-encoding&gt;</literal>
    (обидва варіанти є семантично однаковими).
   </simpara>

   <example>
    <title>convert.iconv.*</title>
    <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'convert.iconv.utf-16le.utf-8');
fwrite($fp, "T\0h\0i\0s\0 \0i\0s\0 \0a\0 \0t\0e\0s\0t\0.\0\n\0");
fclose($fp);
/* Виводить: This is a test. */
?>
]]>
    </programlisting>
   </example>
  </section>
 </section>

 <section xml:id="filters.compression">
  <title>Фільтри для стиснення</title>

  <simpara>
   Оскільки <link linkend="wrappers.compression">обгортки для стиснення</link>
   надають спосіб створення gzip— і bz2—сумісних файлів в локальній файловій
   системі, вони не надають засоби для загального стиснення мережевих
   потоків або переведення не стисненого потоку в стиснений. Натомість фільтр
   для стиснення може застосовуватися до будь-якого ресурсу потоку в будь-який
   час.
  </simpara>

  <note>
   <simpara>
    Фільтри для стиснення <emphasis>не</emphasis> генерують заголовки чи
    закінчення, використовуючи утиліти командного рядка, такі як
    <literal>gzip</literal>. Вони лише стискають і розтискають потрібні порції
    даних потоку.
   </simpara>
  </note>

  <section xml:id="filters.compression.zlib">
   <title>zlib.deflate та zlib.inflate</title>
   <simpara>
    <literal>zlib.deflate</literal> (стиснення) та
    <literal>zlib.inflate</literal> (розтиснення) є реалізаціями методів для
    стиснення, описаних у <link xlink:href="&url.rfc;1951">RFC 1951</link>.
    Фільтр <literal>deflate</literal> приймає до трьох параметрів, що
    передаються як асоціативний масив.

    <parameter>level</parameter> вказує силу стиснення числом від 1 до 9. Вищі
    числа, як правило, означатимуть стиснення даних до менший розміру, що
    коштуватиме додаткового процесорного часу. Також існують два спеціальні
    рівні стиснення: 0 (взагалі без стиснення) і -1 (звичайний внутрішній для
    zlib — зараз 6).

    <parameter>window</parameter> це двійковий логарифм розміру вікна петлі
    стиснення. Вищі значення (до 15 — 32768 байтів) дають краще стиснення,
    використовуючи більше пам'яті, коли нижчі значення (менше 9 — 512 байтів)
    — гірше стиснення при меншому обсязі пам'яті. Початково параметр
    <parameter>window</parameter> дорівнює <literal>15</literal>.

    <parameter>memory</parameter> є шкалою, що визначає, скільки пам'яті для
    роботи повинно бути виділено. Діапазон допустимих значень від 1
    (мінімальна кількість пам'яті) до 9 (максимум). Це виділення пам'яті
    впливає лише на швидкість, а не на розмір згенерованих даних.
   </simpara>

   <note>
    <simpara>
     Оскільки рівень стиснення є найбільш використовуваним параметром, він
     натомість може задаватися, як просте числове значення (замість елемента
     масиву).
    </simpara>
   </note>

   <simpara>
    Фільтри стиснення zlib.* є доступними, якщо увімкнена підтримка
    <link linkend="ref.zlib">zlib</link>.
   </simpara>

   <example>
    <title>
     <literal>zlib.deflate</literal> та
     <literal>zlib.inflate</literal>
    </title>
    <programlisting role="php">
<![CDATA[
<?php
$params = array('level' => 6, 'window' => 15, 'memory' => 9);

$original_text = "Це тест.\nЦе тільки тест.\nЦе неважливий рядок.\n";
echo "Початковий текст містить " . strlen($original_text) . " символ(ів).\n";

$fp = fopen('test.deflated', 'w');
stream_filter_append($fp, 'zlib.deflate', STREAM_FILTER_WRITE, $params);
fwrite($fp, $original_text);
fclose($fp);

echo "Стиснений файл має " . filesize('test.deflated') . " байт(ів).\n";
echo "Початковий текст був:\n";
/* Для розтиснення на льоту використовується функція readfile та фільтр zlib.inflate */
readfile('php://filter/zlib.inflate/resource=test.deflated');

/* Генерує вивід:

Початковий текст містить 81 символ(ів).
Стиснений файл має 72 байт(ів).
Початковий текст був:
Це тест.
Це тільки тест.
Це неважливий рядок.

 */
?>
]]>
    </programlisting>
   </example>

   <example>
    <title>
     Простий <literal>zlib.deflate</literal>
    </title>
    <programlisting role="php">
<![CDATA[
<?php
$original_text = "Це тест.\nЦе тільки тест.\nЦе неважливий рядок.\n";
echo "Початковий текст має " . strlen($original_text) . " символ(ів).\n";

$fp = fopen('test.deflated', 'w');
/* "6" — вказує рівень стиснення */
stream_filter_append($fp, 'zlib.deflate', STREAM_FILTER_WRITE, 6);
fwrite($fp, $original_text);
fclose($fp);

echo "Стиснений файл має " . filesize('test.deflated') . " байт(ів).\n";

/* Генерує вивід:

Початковий текст має 81 символ(ів).
Стиснений файл має 66 байт(ів).

 */
?>
]]>
    </programlisting>
   </example>
  </section>

  <section xml:id="filters.compression.bzip2">
   <title>bzip2.compress та bzip2.decompress</title>
   <simpara>
    <literal>bzip2.compress</literal> та
    <literal>bzip2.decompress</literal>
    виконують роботу, схожу зі zlib-фільтрами, як описано вище.

    Фільтр <literal>bzip2.compress</literal> приймає до двох параметрів у
    вигляді асоціативного масиву: 

    <parameter>blocks</parameter> — це ціле число від 1 до 9 визначає
    кількість блоків пам'яті розміром у 100кБ, яку потрібно виділити для
    роботи. 

    <parameter>work</parameter> — це також ціле число в діапазоні від 0 до
    250, яке вказує, скільки зусиль потрібно витратити, використовуючи
    звичайний метод стиснення, перш ніж повернутися до повільнішого, але
    надійнішого методу. Використання цього параметру впливає лише на швидкість
    стиснення. Цей параметр не змінює ані розмір стисненого виводу, ані
    використання пам’яті. Коефіцієнт роботи 0 вказує використовувати внутрішнє
    стандартне значення бібліотеки bzip.   

    Фільтр <literal>bzip2.decompress</literal> приймає лиш один параметр,
    якому задається звичайне логічне значенням або елемент
    <parameter>small</parameter> асоціативного масиву.

    Коли <parameter>small</parameter> має значення &true;, бібліотека bzip
    виконує розстиснення, використовуючи найменше пам'яті, проте повільно.
   </simpara>

   <simpara>
     Фільтри стиснення bzip2.* доступні, якщо увімкнена підтримка
     <link linkend="ref.bzip2">bz2</link>.
   </simpara>

   <example>
    <title>
     <literal>bzip2.compress</literal> та
     <literal>bzip2.decompress</literal>
    </title>
    <programlisting role="php">
<![CDATA[
<?php
$param = array('blocks' => 9, 'work' => 0);

echo "Початковий файл має " . filesize('LICENSE') . " байт(ів).\n";

$fp = fopen('LICENSE.compressed', 'w');
stream_filter_append($fp, 'bzip2.compress', STREAM_FILTER_WRITE, $param);
fwrite($fp, file_get_contents('LICENSE'));
fclose($fp);

echo "Стиснений файл має " . filesize('LICENSE.compressed') . " байт(ів).\n";

/* Генерує вивід:

Початковий файл має 3288 байт(ів).
Стиснений файл 1488 байт(ів).

 */
?>
]]>
    </programlisting>
   </example>
  </section>
  </section>

 <section xml:id="filters.encryption">
  <title>Шифрувальні фільтри</title>

  <para>
    Шифрувальні фільтри особливо корисні для шифрування файлу чи потоку.
  </para>

  <section xml:id="filters.encryption.mcrypt">
   <title>mcrypt.* та mdecrypt.*</title>
   <para>
     &warn.deprecated.feature-7-1-0;
   </para>

   <simpara>
    <literal>mcrypt.*</literal> та <literal>mdecrypt.*</literal> забезпечують
    симетричне шифрування та дешифрування за допомогою libmcrypt. Обидва
    набори фільтрів підтримують ті самі алгоритми, що й
    <link linkend="ref.mcrypt">розширення mcrypt</link>. Записуються вони так:
    <literal>mcrypt.ciphername</literal>, де <parameter>ciphername</parameter>
    — це назва шифру, що може бути параметром до
    <function>mcrypt_module_open</function>. Також доступні п'ять параметрів
    фільтра, що записані нижче:
   </simpara>

   <para>
    <table>
     <title>Параметри фільтра mcrypt</title>
     <tgroup cols="4">
      <thead>
       <row>
        <entry>Параметр</entry>
        <entry>Обов'язковий?</entry>
        <entry>Початкове значення</entry>
        <entry>Приклади значень</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>mode</entry>
        <entry>Необов'язковий</entry>
        <entry>cbc</entry>
        <entry>cbc, cfb, ecb, nofb, ofb, stream</entry>
       </row>
       <row>
        <entry>algorithms_dir</entry>
        <entry>Необов'язковий</entry>
        <entry>ini_get('mcrypt.algorithms_dir')</entry>
        <entry>Розташування модулів алгоритмів</entry>
       </row>
       <row>
        <entry>modes_dir</entry>
        <entry>Необов'язковий</entry>
        <entry>ini_get('mcrypt.modes_dir')</entry>
        <entry>Розташування модулів режимів</entry>
       </row>
       <row>
        <entry>iv</entry>
        <entry>Обов'язковий</entry>
        <entry>Немає</entry>
        <entry>
          Типово 8, 16 чи 32 байта дівйкових даних. Залежно від шифру
        </entry>
       </row>
       <row>
        <entry>key</entry>
        <entry>Обов'язковий</entry>
        <entry>Немає</entry>
        <entry>
          Типово 8, 16 чи 32 байта дівйкових даних. Залежно від шифру
        </entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </para>

   <example>
    <title>Шифрування з Blowfish</title>
    <programlisting role="php">
<![CDATA[
<?php
//Передбачається, що $key був створений раніше
$iv_size = mcrypt_get_iv_size(MCRYPT_BLOWFISH, MCRYPT_MODE_CBC);
$iv = mcrypt_create_iv($iv_size, MCRYPT_DEV_URANDOM);
$fp = fopen('encrypted-file.enc', 'wb');
fwrite($fp, $iv);
$opts = array('mode'=>'cbc','iv'=>$iv, 'key'=>$key);
stream_filter_append($fp, 'mcrypt.blowfish', STREAM_FILTER_WRITE, $opts);
fwrite($fp, 'message to encrypt');
fclose($fp);

//Розшифрування...
$fp = fopen('encrypted-file.enc', 'rb');
$iv = fread($fp, $iv_size = mcrypt_get_iv_size(MCRYPT_BLOWFISH, MCRYPT_MODE_CBC));
$opts = array('mode'=>'cbc','iv'=>$iv, 'key'=>$key);
stream_filter_append($fp, 'mdecrypt.blowfish', STREAM_FILTER_READ, $opts);
$data = rtrim(stream_get_contents($fp)); //Обрізає порожній відступ
fclose($fp);
echo $data;
?>
]]>
    </programlisting>
   </example>
   <example>
    <title>Зашифровування файлу за допомогою AES-128 CBC з SHA256 HMAC</title>
    <programlisting role="php">
<![CDATA[
<?php
AES_CBC::encryptFile($password, "plaintext.txt", "encrypted.enc");
AES_CBC::decryptFile($password, "encrypted.enc", "decrypted.txt");

class AES_CBC
{
   protected static $KEY_SIZES = array('AES-128'=>16,'AES-192'=>24,'AES-256'=>32);
   protected static function key_size() { return self::$KEY_SIZES['AES-128']; } //початковий AES-128
   public static function encryptFile($password, $input_stream, $aes_filename){
      $iv_size = mcrypt_get_iv_size(MCRYPT_RIJNDAEL_128, MCRYPT_MODE_CBC);
      $fin = fopen($input_stream, "rb");
      $fc = fopen($aes_filename, "wb+");
      if (!empty($fin) && !empty($fc)) {
         fwrite($fc, str_repeat("_", 32) );//заповнювач, SHA256 HMAC з'явиться тут пізніше
         fwrite($fc, $hmac_salt = mcrypt_create_iv($iv_size, MCRYPT_DEV_URANDOM));
         fwrite($fc, $esalt = mcrypt_create_iv($iv_size, MCRYPT_DEV_URANDOM));
         fwrite($fc, $iv = mcrypt_create_iv($iv_size, MCRYPT_DEV_URANDOM));
         $ekey = hash_pbkdf2("sha256", $password, $esalt, $it=1000, self::key_size(), $raw=true);
         $opts = array('mode'=>'cbc', 'iv'=>$iv, 'key'=>$ekey);
         stream_filter_append($fc, 'mcrypt.rijndael-128', STREAM_FILTER_WRITE, $opts);
         $infilesize = 0;
         while (!feof($fin)) {
            $block = fread($fin, 8192);
            $infilesize+=strlen($block);
            fwrite($fc, $block);
         }
         $block_size = mcrypt_get_block_size(MCRYPT_RIJNDAEL_128, MCRYPT_MODE_CBC);
         $padding = $block_size - ($infilesize % $block_size);//$padding є числом в діапазоні 1-16
         fwrite($fc, str_repeat(chr($padding), $padding) );//виконує PKCS7-доповнення
         fclose($fin);
         fclose($fc);
         $hmac_raw = self::calculate_hmac_after_32bytes($password, $hmac_salt, $aes_filename);
         $fc = fopen($aes_filename, "rb+");
         fwrite($fc, $hmac_raw);//перезаписує заповнювач
         fclose($fc);
      }
   }
   public static function decryptFile($password, $aes_filename, $out_stream) {
      $iv_size = mcrypt_get_iv_size(MCRYPT_RIJNDAEL_128, MCRYPT_MODE_CBC);
      $hmac_raw = file_get_contents($aes_filename, false, NULL,  0, 32);
      $hmac_salt = file_get_contents($aes_filename, false, NULL, 32, $iv_size);
      $hmac_calc = self::calculate_hmac_after_32bytes($password, $hmac_salt, $aes_filename);
      $fc = fopen($aes_filename, "rb");
      $fout = fopen($out_stream, 'wb');
      if (!empty($fout) && !empty($fc) && self::hash_equals($hmac_raw,$hmac_calc)) {
         fread($fc, 32+$iv_size);//пропуск sha256 hmac та сіль
         $esalt = fread($fc, $iv_size);
         $iv    = fread($fc, $iv_size);
         $ekey = hash_pbkdf2("sha256", $password, $esalt, $it=1000, self::key_size(), $raw=true);
         $opts = array('mode'=>'cbc', 'iv'=>$iv, 'key'=>$ekey);
         stream_filter_append($fc, 'mdecrypt.rijndael-128', STREAM_FILTER_READ, $opts);
         while (!feof($fc)) {
            $block = fread($fc, 8192);
            if (feof($fc)) {
               $padding = ord($block[strlen($block) - 1]);//припускається PKCS7-доповнення
               $block = substr($block, 0, 0-$padding);
            }
            fwrite($fout, $block);
         }
         fclose($fout);
         fclose($fc);
      }
   }
   private static function hash_equals($str1, $str2) {
      if(strlen($str1) == strlen($str2)) {
         $res = $str1 ^ $str2;
         for($ret=0,$i = strlen($res) - 1; $i >= 0; $i--) $ret |= ord($res[$i]);
         return !$ret;
      }
      return false;
   }
   private static function calculate_hmac_after_32bytes($password, $hsalt, $filename) {
      static $init=0;
      $init or $init = stream_filter_register("user-filter.skipfirst32bytes", "FileSkip32Bytes");
      $stream = 'php://filter/read=user-filter.skipfirst32bytes/resource=' . $filename;
      $hkey = hash_pbkdf2("sha256", $password, $hsalt, $iterations=1000, 24, $raw=true);
      return hash_hmac_file('sha256', $stream, $hkey, $raw=true);
   }
}
class FileSkip32Bytes extends php_user_filter
{
   private $skipped=0;
   function filter($in, $out, &$consumed, $closing)  {
      while ($bucket = stream_bucket_make_writeable($in)) {
         $outlen = $bucket->datalen;
         if ($this->skipped<32){
            $outlen = min($bucket->datalen,32-$this->skipped);
            $bucket->data = substr($bucket->data, $outlen);
            $bucket->datalen = $bucket->datalen-$outlen;
            $this->skipped+=$outlen;
         }
         $consumed += $outlen;
         stream_bucket_append($out, $bucket);
      }
      return PSFS_PASS_ON;
   }
}
class AES_128_CBC extends AES_CBC {
   protected static function key_size() { return self::$KEY_SIZES['AES-128']; }
}
class AES_192_CBC extends AES_CBC {
   protected static function key_size() { return self::$KEY_SIZES['AES-192']; }
}
class AES_256_CBC extends AES_CBC {
   protected static function key_size() { return self::$KEY_SIZES['AES-256']; }
}
]]>
    </programlisting>
   </example>
  </section>
 </section>

</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
