<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 6b09bb638aa64d1fad5f4a630a8da9a2692ce733 Maintainer: mproshchuk Status: wip -->
 <chapter xml:id="language.basic-syntax" xmlns="http://docbook.org/ns/docbook">
  <title>Базовий синтаксис</title>
  <sect1 xml:id="language.basic-syntax.phptags">
   <title>Теги PHP</title>
   <para>
    Коли PHP обробляє файл, вона шукає відкриваючі та закриваючі теги,
    тобто <literal>&lt;?php</literal> та <literal>?&gt;</literal>,
    які говорять PHP, що між ними потрібно починати і завершувати інтерпретацію
    кода. Обробка в такій манері дозволяє PHP бути вбудованою у різного роду
    документи, оскільки код, за межами пари з відкриваючим та закриваючим
    тегами, ігнорується обробником PHP.
   </para>

   <para>
    PHP має короткий echo-тег <literal>&lt;?=</literal>, який є скороченим
    варіантом <code>&lt;?php echo</code>.
   </para>

   <para>
    <example>
     <title>PHP Opening and Closing Tags</title>
     <programlisting role="php">
<![CDATA[
1.  <?php echo 'if you want to serve PHP code in XHTML or XML documents,
                use these tags'; ?>

2.  You can use the short echo tag to <?= 'print this string' ?>.
    It's equivalent to <?php echo 'print this string' ?>.

3.  <? echo 'this code is within short tags, but will only work '.
            'if short_open_tag is enabled'; ?>
]]>
     </programlisting>
    </example>
   </para>

   <para>
    Short tags (example three) are available by default but can be disabled
    either via the <link linkend="ini.short-open-tag">short_open_tag</link>
    &php.ini; configuration file directive, or are disabled by default if
    PHP is built with the <option>--disable-short-tags</option> configuration.
   </para>
   <para>
    <note>
     <para>
      As short tags can be disabled it is recommended to only use the normal
      tags (<code>&lt;?php ?&gt;</code> and <code>&lt;?= ?&gt;</code>) to
      maximise compatibility.
     </para>
    </note>
   </para>

   <para>
    If a file contains only PHP code, it is preferable to omit the PHP closing tag
    at the end of the file.  This prevents accidental whitespace or new lines
    being added after the PHP closing tag, which may cause unwanted effects
    because PHP will start output buffering when there is no intention from
    the programmer to send any output at that point in the script.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
echo "Hello world";

// ... ще код

echo "Останній вивід";

// тут скрипт завершується без додавання закриваючого тега PHP
]]>

     </programlisting>
    </informalexample>
   </para>
  </sect1>
  <sect1 xml:id="language.basic-syntax.phpmode">
   <title>Відмежування від HTML</title>
   <para>
    Все, що за межами пари з відкриваючим та закриваючим тегами, ігнорується
    обробником PHP. Таким чином можна обробляти PHP-файли зі змішаним вмістом, тобто
    вбудовувати PHP-код в HTML-документи, наприклад, при створенні
    шаблонів.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<p>Ця частина коду буде проігнорована PHP, але показуватиметься через браузер.</p>
<?php echo 'В той час, як ця частина коду буде оброблятись.'; ?>
<p>І цей код - також буде проігноровано PHP, але показуватиметься через браузер.</p>
]]>
     </programlisting>
    </informalexample>
    Такий код обробляється як і очікується, оскільки коли інтерпретатор PHP
    зустрічає закриваючий тег ?&gt; він просто починає виводити все, що
    знаходить, допоки не зустріне інший відкриваючий тег. Але є два виключення,
    коли інтерпретатор не виводить вміст після закриваючого тега:
    по-перше, якщо безпосередньо далі йде символ нового рядка - про це можна
    прочитати на сторінці
    <link linkend="language.basic-syntax.instruction-separation">поділ інструкцій</link>;
    і по-друге, якщо наступний код знаходиться всередині тіла умовного оператора
    (в такому разі інтерпретатор визначає результат в умові, перед тим як
    вирішити що потрібно виводити). Дивіться наступний приклад.
   </para>
   <para>
    Using structures with conditions
    <example>
     <title>Розмежування коду PHP та HTML з використанням умовних операторів</title>
     <programlisting role="php">
<![CDATA[
<?php if ($expression == true): ?>
  Цей текст буде показано, якщо змінна $expression матиме значення true,
  тобто вираз if ($expression == true) буде дійсним.
<?php else: ?>
  В противному разі буде виводитись цей текст.
<?php endif; ?>
]]>
     </programlisting>
    </example>
    В даному прикладі PHP буде пропускати ті блоки, де умова виразу не виконується,
    навіть не дивлячись на те, що ці блоки знаходяться за межами відкриваючого
    та закриваючого PHP-тегів, PHP-інтерпретатор просто перестрибуватиме їх.
   </para>
   <para>
    Для виводу великих блоків текста, вихід з PHP-режиму
    є більш ефективним, ніж відправка всього текста через
    <function>echo</function> чи <function>print</function>.
   </para>
   <para>
    <note>
     <para>
      Вставляючи блоки PHP всередину XML чи XHTML, потрібно використовувати
      теги &lt;?php ?&gt;, щоб код відповідав стандартам.
     </para>
    </note>
   </para>
  </sect1>

  <sect1 xml:id="language.basic-syntax.instruction-separation">
   <title>Поділ інструкцій</title>
   <para>
    Так як і C чи Perl, PHP вимагає завершення інструкцій символом
    крапки з комою в кінці кожного виразу. Закриваючий тег в блоці PHP-коду
    автоматично зумовить додавання символа крапки з комою; тобто вам не
    потрібно завершувати останній рядок PHP-блоку символом крапки з комою.
    Закриваючий тег також зумовить видалення символа нового рядка, що йде
    безпосередньо зразу після нього, якщо він є.
    </para>
   <para>
    <example>
     <title>Example showing the closing tag encompassing the trailing newline</title>
     <programlisting role="php">
<![CDATA[
<?php echo "Some text"; ?>
No newline
<?= "But newline now" ?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
Some textNo newline
But newline now
]]>
     </screen>
    </example>
   </para>

   <para>
    Examples of entering and exiting the PHP parser:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
    echo 'Це перевірка';
?>

<?php echo 'Це перевірка' ?>

<?php echo 'Ми опустили останній закриваючий тег';
]]>
     </programlisting>
    </informalexample>
    <note>
     <para>
      Закриваючий тег PHP-блока в кінці файла є необов'язковим,
      а в деяких випадках його відсутність є корисною при використанні
      <function>include</function> чи <function>require</function>, оскільки
      небажаний пробіл в кінці файлів не додається, та у вас все ще
      залишається можливість додавати заголовки для відповіді пізніше. Це також
      є зручним, якщо ви використовуєте буферизацію виводу, та не хотіли б
      бачити небажаних пробілів в кінці файлів при їх підключенні.
     </para>
    </note>
   </para>
  </sect1>
  <sect1 xml:id="language.basic-syntax.comments">
   <title>Коментарі</title>
   <para>
    PHP підтримує коментарі в стилі 'C', 'C++', Unix та shell (Perl). Наприклад:

    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
    echo 'Це перевірка'; // Це однорядковий коментар в стилі C++
    
    /* Це багаторядковий коментар
       і в цьому рядку можна писати щось */
       
    echo 'Це вже інша перевірка';
    
    echo 'Завершальна перевірка'; # Це однорядковий коментар в стилі shell
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    Однорядкові коментарі закоментовуються тільки до кінця рядка
    або поточного блока PHP-коду, дивлячись що йде першим.
    Це означає, що HTML-код після <literal>// ... ?&gt;</literal>
    чи <literal># ...  ?&gt;</literal> БУДЕ надруковано, оскільки закриваючий
    тег ?&gt; перериває PHP-режим та включає HTML-режим, і
    <literal>//</literal> чи <literal>#</literal> не впливають на це.
   </simpara>
   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<h1>Це <?php # echo 'простий';?> приклад</h1>
<p>Заголовок, що у верхньому рядку, буде виводити 'Це  приклад'.</p>
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    Коментарі в стилі 'C' завершуються, коли зустрічається перша ж
    послідовність <literal>*/</literal>. Потрібно обережно використовувати такі
    коментарі, та перевіряти чи не створили ви вкладених коментарів в такому
    стилі. Досить легко це зробити, якщо намагатись закоментовувати великий
    блок коду.
   </simpara>
   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
 /*
    echo 'Це перевірка'; /* Цей коментар спричинить проблеми */
 */
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect1>
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
