<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: f5e5b54129045a7d02c5285a88cea0abff8ffb6f Maintainer: mproshchuk Status: ready -->
 <sect1 xml:id="language.oop5.visibility" xmlns="http://docbook.org/ns/docbook">
  <title>Область видимості</title>
  <para>
   Області видимості властивостей, методів або (починаючи з PHP 7.1.0) констант
   можуть визначатись через ключові слова <literal>public</literal>,
   <literal>protected</literal> чи <literal>private</literal>. Доступ до членів
   класу, оголошених як public (загальнодоступні), дозволено всюди. Члени класу,
   оголошені як protected (захищені), доступні лише всередині самого класу, а
   також через класи-нащадки та батьківські класи. Члени класу, оголошені як
   private (закриті) можуть бути доступні лише через клас, де вони визначені.
  </para>

  <sect2 xml:id="language.oop5.visibility-members">
   <title>Видимість властивості</title>
   <para>
    Властивості класу можуть оголошуватись як public, private чи protected.
    Властивість, оголошена без ключового слова видимості, вважається
    загальнодоступною.
   </para>
   <para>
    <example>
     <title>Оголошення властивості</title>
     <programlisting role="php">
<![CDATA[
<?php
/**
 * Визначення MyClass
 */
class MyClass
{
    public $public = 'Загальнодоступна';
    protected $protected = 'Захищена';
    private $private = 'Закрита';

    function printHello()
    {
        echo $this->public;
        echo $this->protected;
        echo $this->private;
    }
}

$obj = new MyClass();
echo $obj->public; // Працює
echo $obj->protected; // Фатальна помилка
echo $obj->private; // Фатальна помилка
$obj->printHello(); // Виводить Загальнодоступна, Захищена та Закрита


/**
 * Визначення MyClass2
 */
class MyClass2 extends MyClass
{
    // Ми можемо перевизначити public- та protected-властивості, але не private
    public $public = 'Public2';
    protected $protected = 'Захищена2';

    function printHello()
    {
        echo $this->public;
        echo $this->protected;
        echo $this->private;
    }
}

$obj2 = new MyClass2();
echo $obj2->public; // Працює
echo $obj2->protected; // Фатальна помилка
echo $obj2->private; // Невизначено
$obj2->printHello(); // Виводить Загальнодоступна2, Захищена2, Закрита

?> 
]]>
     </programlisting>
    </example>
   </para>
  </sect2>

  <sect2 xml:id="language.oop5.visiblity-methods">
   <title>Видимість метода</title>
   <para>
    Методи класу можуть бути визначені як public, private чи protected. Метод,
    оголошений без ключового слова видимості, вважається загальнодоступним.
   </para>
   <para>
    <example>
     <title>Оголошення метода</title>
     <programlisting role="php">
<![CDATA[
<?php
/**
 * Визначення MyClass
 */
class MyClass
{
    // Оголошення загальнодоступного (публічного) конструктора
    public function __construct() { }

    // Оголошення публічного метода
    public function MyPublic() { }

    // Оголошення захищеного метода
    protected function MyProtected() { }

    // Оголошення закритого метода
    private function MyPrivate() { }

    // Таке оголошення метода буде оброблятись як public метод
    function Foo()
    {
        $this->MyPublic();
        $this->MyProtected();
        $this->MyPrivate();
    }
}

$myclass = new MyClass;
$myclass->MyPublic(); // Працює
$myclass->MyProtected(); // Фатальна помилка
$myclass->MyPrivate(); // Фатальна помилка
$myclass->Foo(); // Працюють Public, Protected та Private методи


/**
 * Визначення MyClass2
 */
class MyClass2 extends MyClass
{
    // Таке оголошення метода буде оброблятись як public метод
    function Foo2()
    {
        $this->MyPublic();
        $this->MyProtected();
        $this->MyPrivate(); // Фатальна помилка
    }
}

$myclass2 = new MyClass2;
$myclass2->MyPublic(); // Працює
$myclass2->Foo2(); // Працюють методи Public та Protected, але не Private

class Bar 
{
    public function test() {
        $this->testPrivate();
        $this->testPublic();
    }

    public function testPublic() {
        echo "Bar::testPublic\n";
    }
    
    private function testPrivate() {
        echo "Bar::testPrivate\n";
    }
}

class Foo extends Bar 
{
    public function testPublic() {
        echo "Foo::testPublic\n";
    }
    
    private function testPrivate() {
        echo "Foo::testPrivate\n";
    }
}

$myFoo = new Foo();
$myFoo->test(); // Bar::testPrivate 
                // Foo::testPublic
?>
]]>
     </programlisting>
    </example>
   </para>
  </sect2>

  <sect2 xml:id="language.oop5.visiblity-constants">
   <title>Видимість констант</title>
   <para>
    Починаючи з PHP 7.1.0, константи класу можуть оголошуватись як public,
    private чи protected. Константа, оголошена без ключового слова видимості,
    вважається загальнодоступною.
   </para>
   <para>
    <example>
     <title>Оголошення констант, починаючи з PHP 7.1.0</title>
     <programlisting role="php">
<![CDATA[
<?php
/**
 * Define MyClass
 */
class MyClass
{
    // Оголошення загальнодоступної константи
    public const MY_PUBLIC = 'public';

    // Оголошення захищеної константи
    protected const MY_PROTECTED = 'protected';

    // Оголошення закритої константи
    private const MY_PRIVATE = 'private';

    public function foo()
    {
        echo self::MY_PUBLIC;
        echo self::MY_PROTECTED;
        echo self::MY_PRIVATE;
    }
}

$myclass = new MyClass();
MyClass::MY_PUBLIC; // Працює
MyClass::MY_PROTECTED; // Фатальна помилка
MyClass::MY_PRIVATE; // Фатальна помилка
$myclass->foo(); // Працюють Public, Protected та Private


/**
 * Визначення MyClass2
 */
class MyClass2 extends MyClass
{
    // Це публічний метод
    function foo2()
    {
        echo self::MY_PUBLIC;
        echo self::MY_PROTECTED;
        echo self::MY_PRIVATE; // Фатальна помилка
    }
}

$myclass2 = new MyClass2;
echo MyClass2::MY_PUBLIC; // Працює
$myclass2->foo2(); // Працюють константи Public та Protected, але не Private
?>
]]>
     </programlisting>
    </example>
   </para>
  </sect2>

  <sect2 xml:id="language.oop5.visibility-other-objects">
   <title>Видимість з інших об'єктів</title>
   <para>
    Однотипні об'єкти мають доступ до методів та властивостей один одного, що
    оголошені як private або protected, навіть якщо ці об'єкти не є одним і тим
    же примірником. Це пояснюється тим, що впровадження механізму видимості
    відбувається відносно класів цих об'єктів, а не відносно самих об'єктів.
   </para>
   <example>
    <title>Доступ до закритих членів класу, що мають однаковий тип об'єкта</title>
    <programlisting role="php">
<![CDATA[
<?php
class Test
{
    private $foo;

    public function __construct($foo)
    {
        $this->foo = $foo;
    }

    private function bar()
    {
        echo 'Доступ до закритого метода.';
    }

    public function baz(Test $other)
    {
        // Ми можемо змінити закриту властивість:
        $other->foo = 'hello';
        var_dump($other->foo);

        // Ми також можемо викликати закритий метод:
        $other->bar();
    }
}

$test = new Test('test');

$test->baz(new Test('other'));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
string(5) "hello"
Доступ до закритого метода.
]]>
    </screen>
   </example>
  </sect2>
 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
