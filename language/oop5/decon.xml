<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 9f351a14a749721a74df1dc6ac9533cf796a652e Maintainer: mproshchuk Status: ready -->
 <sect1 xml:id="language.oop5.decon" xmlns="http://docbook.org/ns/docbook">
  <title>Конструктори та деструктори</title>

  <sect2 xml:id="language.oop5.decon.constructor">
   <title>Конструктор</title>
   <methodsynopsis xml:id="object.construct">
    <type>void</type><methodname>__construct</methodname>
    <methodparam rep="repeat"><type>mixed</type><parameter>values</parameter><initializer>""</initializer></methodparam>
   </methodsynopsis>
   <para>
    PHP дозволяє розробникам оголошувати методи-конструктори. Класи, в яких
    оголошено метод-конструктор, будуть викликати його під час створення нового
    об'єкта. Це корисно, коли перед використанням об'єкта його потрібно
    ініціалізувати.
   </para>
   <note>
    <simpara>
     Батьківський конструктор не викликається автоматично, якщо в дочірньому
     класі оголошено власний конструктор. Для цього необхідно здійснити виклик
     <function>parent::__construct</function> всередині дочірнього конструктора.
     Якщо ж в дочірньому класі не оголошено власний конструктор, то його можна
     наслідувати з батьківського класу як звичайний метод (якщо той не оголошено
     як закритий).
    </simpara>
   </note>
   <example>
    <title>Конструктори в наслідуванні</title>
    <programlisting role="php">
<![CDATA[
<?php
class BaseClass {
    function __construct() {
        print "В конструкторі класу BaseClass\n";
    }
}

class SubClass extends BaseClass {
   function __construct() {
       parent::__construct();
       print "В конструкторі класу SubClass\n";
   }
}

class OtherSubClass extends BaseClass {
    // Успадковує конструктор класу BaseClass
}

// Виводить: В конструкторі класу BaseClass
$obj = new BaseClass();

// Виводить:
// В конструкторі класу BaseClass
// В конструкторі класу SubClass
$obj = new SubClass();

// Виводить: В конструкторі класу BaseClass
$obj = new OtherSubClass();
?> 
]]>
    </programlisting>
   </example>
   <para>
    На відміну від інших методів, на
    <link linkend="object.construct">__construct()</link> під час наслідування
    не поширюються звичайні <link linkend="language.oop.lsp">правила сумісності
    сигнатур</link>.
   </para>
   <para>
    Конструктори — це звичайні методи, виклик яких здійснюється під час
    створення примірника їхнього класу. Таким чином, для них можна оголошувати
    довільну кількість параметрів, які можуть бути обов'язковими, мати тип та
    початкові значення. Параметри конструктору передають в дужках після назви
    класу.
   </para>
   <example>
    <title>Використання параметрів конструктора</title>
    <programlisting role="php">
<![CDATA[
<?php
class Point {
    protected int $x;
    protected int $y;

    public function __construct(int $x, int $y = 0) {
        $this->x = $x;
        $this->y = $y;
    }
}

// Вказати обидва параметри.
$p1 = new Point(4, 5);
// Вказати тільки обов'язковий параметр. $y отримає початкове значення 0.
$p2 = new Point(4);
// З названими параметрами (починаючи з PHP 8.0):
$p3 = new Point(y: 5, x: 4);
?>
]]>
    </programlisting>
   </example>
   <para>
    Якщо клас не має конструктора, або конструктор не вимагає обов'язкових
    параметрів, дужки можуть бути пропущені.
   </para>
   <sect3>
    <title>Конструктори в старому стилі</title>
    <para>
     До PHP 8.0.0, в глобальному просторі імен однойменний з класом метод
     інтерпретується як конструктор старого зразка. Такий синтаксис є
     застарілим і призводить до помилки <constant>E_DEPRECATED</constant>, проте
     досі дозволяє викликати цю функцію, як конструктор. Якщо оголошено і метод
     <link linkend="object.construct">__construct()</link>, і однойменний метод,
     то для виклику буде взято <link
     linkend="object.construct">__construct()</link>.
    </para>
    <para>
     В класах інших просторів імен, чи будь-яких інших класах, починаючи з PHP
     8.0.0, однойменний метод не має особливого значення.
    </para>
    <para>В новому коді завжди потрібно використовувати метод
     <link linkend="object.construct">__construct()</link>.
    </para>
   </sect3>
   <sect3 xml:id="language.oop5.decon.constructor.promotion">
    <title>Параметри конструктора як властивості</title>
    <para>
     Починаючи з PHP 8.0.0, параметри конструктора можна оголошувати як
     властивості об'єкта. Дуже часто в тілі конструктора значення його
     параметрів призначають властивостям і більше не обробляють. Тепер же існує
     спрощений спосіб це зробити. Приклад вище можна переписати наступним чином.
    </para>
    <example>
     <title>Оголошення параметрів конструктора як властивостей</title>
     <programlisting role="php">
<![CDATA[
<?php
class Point {
    public function __construct(protected int $x, protected int $y = 0) {
    }
}
]]>
     </programlisting>
    </example>
    <para>
     Якщо оголошений параметр конструктора має модифікатора, то PHP інтерпретує
     параметр також як властивість об'єкта, тож обоє отримають однакові
     значення. Таким чином тіло конструктора може бути порожнім або містити інші
     оператори, які будуть виконані після отримання властивостями значень
     відповідних параметрів.
    </para>
    <para>
     Не усі параметри необхідно оголошувати, як властивості. Дозволено змішувати
     їх зі звичними параметрами в будь-якому порядку. Параметри-властивості не
     впливають на код, що викликає конструктора.
    </para>
    <note>
     <para>
      Здебільшого для означення параметра як властивості використовують
      <link linkend="language.oop5.visibility">модифікатор видимості</link>
      (<literal>public</literal>, <literal>protected</literal> або
      <literal>private</literal>). Ту саму роль виконують інші модифікатори (як
      от <literal>readonly</literal>).
     </para>
    </note>
    <note>
     <para>
      Властивості об'єкта не можуть мати тип <type>callable</type> через
      неоднозначність алгоритмів рушія. Отже це стосується і параметрів, що
      оголошені, як властивості. Однак, будь-яке інше <link
      linkend="language.types.declarations">оголошення типу</link> — дозволене.
     </para>
    </note>
    <note>
     <para>
      Оскільки параметри, що оголошені як властивості, виконують подвійну роль,
      до них застосовуються обмеження щодо назв, які стосуються як параметрів,
      так і властивостей.
     </para>
    </note>
    <note>
     <para>
      <link linkend="language.attributes">Атрибут</link>, встановлений для
      параметра-властивості, діє і на параметр, і на властивість. Початкове
      значення параметра, що оголошений, як властивість, буде надано тільки
      параметру.
     </para>
    </note>
   </sect3>
   
   <sect3 xml:id="language.oop5.decon.constructor.new">
    <title>Ключове слово <literal>new</literal> в ініціалізаторах</title>
    <para>
     Починаючи з PHP 8.1.0, об'єкти можуть бути початковими значеннями
     параметрів, статичних змінних, глобальних констант, а також параметрів
     атрибутів. Об'єкти також можуть бути передані в функцію
     <function>define</function>.
    </para>
    <note>
     <para>
      в таких випадках не дозволено застосовувати: динамічні, нерядкові назви
      класів або анонімні класи; розпакування параметрів; непідтримувані
      вирази, як параметри.
     </para>
    </note>
    <example>
     <title>Використання <literal>new</literal> в ініціалізаторах</title>
     <programlisting role="php">
<![CDATA[
<?php

// Дозволено:
static $x = new Foo;

const C = new Foo;
 
function test($param = new Foo) {}
 
#[AnAttribute(new Foo)]
class Test {
    public function __construct(
        public $prop = new Foo,
    ) {}
}

// Не дозволено (помилка компіляції):
function test(
    $a = new (CLASS_NAME_CONSTANT)(), // динамічна назва класу
    $b = new class {}, // анонімний клас
    $c = new A(...[]), // розпакування параметрів
    $d = new B($abc), // непідтримуваний вираз
) {}
?>
]]>
     </programlisting>
    </example>
   </sect3>
   
   <sect3 xml:id="language.oop5.decon.constructor.static">
    <title>Способи статичного створення об'єктів</title>
    <para>
     PHP підтримує тільки один конструктор на клас. Однак, в деяких випадках
     потрібно будувати об'єкт по-різному з різними вхідними даними.
     Рекомендованим способом є використання статичних методів, як надбудов над
     конструкторами.
    </para>
    <example>
     <title>Використання способів статичного створення об'єктів</title>
     <programlisting role="php">
<![CDATA[
<?php
class Product {

    private ?int $id;
    private ?string $name;

    private function __construct(?int $id = null, ?string $name = null) {
        $this->id = $id;
        $this->name = $name;
    }

    public static function fromBasicData(int $id, string $name): static {
        $new = new static($id, $name);
        return $new;
    }

    public static function fromJson(string $json): static {
        $data = json_decode($json, true);
        return new static($data['id'], $data['name']);
    }

    public static function fromXml(string $xml): static {
        // Користувацька логіка.
        $data = convert_xml_to_array($xml);
        $new = new static();
        $new->id = $data['id'];
        $new->name = $data['name'];
        return $new;
    }
}

$p1 = Product::fromBasicData(5, 'Widget');
$p2 = Product::fromJson($some_json_string);
$p3 = Product::fromXml($some_xml_string);
]]>
     </programlisting>
    </example>
    <para>
     Конструктор можна зробити закритим або захищеним, щоб заборонити виклик
     його ззовні. В такому випадку тільки статичний метод зможе повернути
     примірник свого класу. Статичні методи мають доступ до закритих та
     захищених методів, визначених в спільному класі, навіть якщо останні
     належать до різних примірників цього класу. Закритий конструктор є
     необов'язковим і може мати або не мати сенс, залежно від випадку
     застосування.
    </para>
    <para>
     В прикладі вище три загальнодоступні статичні методи показують різні
     способи створення об'єктів.
    </para>
    <simplelist>
     <member><code>fromBasicData()</code> приймає основні параметри та передає
     їх в конструктор, викликає його та повертає отриманий примірник.</member>
     <member><code>fromJson()</code> приймає JSON-рядок, робить деякі
     перетворення та у форматі, що підходить конструктору, передає йому. Потім
     повертає новий об'єкт.</member>
     <member><code>fromXml()</code> приймає XML-рядок, обробляє його, а потім
     створює чистий об'єкт. Метод викликає конструктор без параметрів,
     оскільки всі вони необов'язкові. Далі безпосередньо задає значення
     властивостям об'єкта та повертає цей об'єкт.</member>
    </simplelist>
    <para>
     У всіх трьох випадках ключове слово <code>static</code> транслюється в
     назву класу, всередині якого воно застосовано.
     In this case, <code>Product</code>.
    </para>
   </sect3>
  </sect2>

  <sect2 xml:id="language.oop5.decon.destructor">
   <title>Деструктор</title>
   <methodsynopsis xml:id="object.destruct">
    <type>void</type><methodname>__destruct</methodname>
    <void />
   </methodsynopsis>
   <para>
    PHP має концепцію деструктора, схожу з тими, що є в інших
    об'єктно-орієнтованих мовах, як от C++. Метод деструктора об'єкта буде
    викликано одразу за відсутності посилань на об'єкт, або в довільному
    порядку під час процедури завершення скрипта.
   </para>
   <example>
    <title>Використання деструктора</title>
    <programlisting role="php">
<![CDATA[
<?php

class MyDestructableClass 
{
    function __construct() {
        print "In constructor\n";
    }

    function __destruct() {
        print "Destroying " . __CLASS__ . "\n";
    }
}

$obj = new MyDestructableClass();
]]>
    </programlisting>
   </example>
   <para>
    Схоже з конструктором, батьківський деструктор не буде викликано
    автоматично. Щоб запустити батьківський деструктор, потрібно явно викликати
    <function>parent::__destruct</function> в тілі дочірнього деструктора.
    Також, як і у випадку з конструктором, якщо в дочірньому класі не оголошено
    деструктор, то він може успадковувати деструктор батьківського класу.
   </para>
   <para>
    Деструктор буде викликано, навіть коли виконання скрипта припиняється
    функцією <function>exit</function>. Виклик <function>exit</function>
    в деструкторі запобігає виконанню решти процедур завершення скрипта.
   </para>
   <note>
    <para>
     Під час завершення скрипта деструктори викликаються після відправлення
     HTTP-заголовків. Робоча тека під час завершення скриптів може відрізнятись
     в деяких SAPI (наприклад в Apache).
    </para>
   </note>
   <note>
    <para>
     Спроба кинути виключення з деструктора, викликаного під час завершення
     скрипта, призведе до фатальної помилки.
    </para>
   </note>
  </sect2>

 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
