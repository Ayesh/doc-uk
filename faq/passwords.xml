<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: f012b2761819e0ab25ff8cf4bac6655cfbc6fcff Maintainer: mproshchuk Status: ready -->
 <chapter xml:id="faq.passwords" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Безпечне гешування паролів</title>
  <titleabbrev>Гешування паролів</titleabbrev>
  
  <simpara>
   Цей розділ пояснює причини використання геш-функцій для убезпечення паролів,
   а також, як це зробити ефективно.
  </simpara>
  
  <qandaset>
   <qandaentry xml:id="faq.passwords.hashing">
    <question>
     <simpara>
      Навіщо гешувати користувацькі паролі?
     </simpara>
    </question>
    <answer>
     <simpara>
      Гешування паролів є основним захисним заходом, що вживається під час
      розробки програми або сервісу, що приймає паролі від користувачів. Без
      гешування будь-які збережені паролі можуть бути вкрадені, якщо сховище
      даних зламають, та негайно використані для зламу програми чи сервісу і
      облікових записів користувачів у інших сервісах, де використано такі ж
      паролі.
     </simpara>
     <simpara>
      Застосування алгоритму гешування користувацьких паролів перед збереженням
      унеможливлюєте викриття зловмисником оригінального пароля, маючи при тому змогу у майбутньому порівнювати
      отриманий геш з наявним.
     </simpara>
     <simpara>
      Важливо підкреслити, що гешування паролів лише захищає їх від розкриття
      у сховищі даних, але не від перехоплення зловмисним кодом, вживленим у
      програму або сервіс.
     </simpara>
    </answer>
   </qandaentry>
   <qandaentry xml:id="faq.passwords.fasthash">
    <question>
     <simpara>
      Чому такі поширені геш-функції як <function>md5</function> і
      <function>sha1</function> не придатні для паролів?
     </simpara>
    </question>
    <answer>
     <simpara>
      Алгоритми гешування MD5, SHA1 та SHA256 розроблені бути дуже швидкими та
      ефективними. З сучасною технікою та комп'ютерним обладнанням стало
      легко <quote>зламати</quote> результат цих алгоритмів, щоб визначити
      початковий текст.
     </simpara>
     <simpara>
      Через те, як швидко сучасні комп'ютери можуть запустити такий алгоритм
      <quote>у зворотньому напрямку</quote>, багато фахівців з безпеки
      наполягають не використовувати таке гешування.
     </simpara>
    </answer>
   </qandaentry>
   <qandaentry xml:id="faq.passwords.bestpractice">
    <question>
     <simpara>
      Як гешувати паролі, якщо поширені геш-функції не придатні.
     </simpara>
    </question>
    <answer>
     <simpara>
      Під час гешування паролів двома найважливішими факторами є витрати на
      обчислення та т. зв. "сіль". Чим більше обчислень має виконати алгоритм,
      тим довше триватиме злам результату його обчислень.
     </simpara>
     <simpara>
      PHP має
      <link linkend="book.password">вбудований API гешування паролів</link>,
      який надає засоби як
      <link linkend="function.password-hash">гешування</link>, так і
      <link linkend="function.password-verify">перевірки паролів</link>
      безпечним способом.
     </simpara>
     <simpara>
      Для гешування паролів рекомендується алгоритм Blowfish, який стандартно
      використовується API гешування паролів, оскільки він є набагато дорожчим
      в обчисленні, аніж MD5 або SHA1, залишаючись масштабованим.
     </simpara>
     <simpara>
      Функція <function>crypt</function> також може гешувати паролі, але
      рекомендовано використовувати її тільки для підтримки сумісності з іншими
      системами. Натомість краще використовувати <link
      linkend="book.password">вбудований API гешування паролів</link> за
      будь-якої можливості.
     </simpara>
    </answer>
   </qandaentry>
   <qandaentry xml:id="faq.passwords.salt">
    <question>
     <simpara>
      Що таке "сіль"?
     </simpara>
    </question>
    <answer>
     <simpara>
      Криптографічна сіль — це текст, який дописується до даних у процесі
      гешування, щоб унеможливити пошук результатів у списку попередньо
      обчислених пар гешів та їхніх вхідних даних, відомого як райдужна таблиця.
     </simpara>
     <simpara>
      Простими словами, сіль — це допоміжна частинка даних, яка значно ускладнює
      злам ваших гешів . Існує певна кількість онлайн сервісів з надання
      розширених списків попередньо обчислених гешів, а також їхніх вхідних
      даних. Використання солі робить малоймовірним або неможливим знаходження
      отриманого гешу в одному з цих списків.
     </simpara>
     <simpara>
      <function>password_hash</function> створить випадкову сіль, коли та не
      вказана, і це, як правило, найпростіший і найбезпечніший підхід.
     </simpara>
    </answer>
   </qandaentry>
   <qandaentry xml:id="faq.password.storing-salts">
    <question>
     <simpara>
      Де сіль зберігається?
     </simpara>
    </question>
    <answer>
     <simpara>
      У <function>password_hash</function> або <function>crypt</function>
      значення, що повертається, містить сіль як частину утвореного гешу. Це
      значення потрібно точно зберігати у базі даних, оскільки воно містить
      інформацію про геш-функцію, яка використовувалася, і потім може бути
      передано безпосередньо до функції <function>password_verify</function> для
      перевірки паролів.
      </simpara>
     <warning>
      <simpara>
       Задля убезпечення від часових атак потрібно завжди використовувати
       функцію <function>password_verify</function> замість повторного гешування
       і порівняння результату зі збереженим гешем.
      </simpara>
     </warning>
     <simpara>
      Наступна діаграма показує формат значення, що повертається функціями
      <function>crypt</function> або <function>password_hash</function>.
      Помітно, що значення є самодостатнім, з усією інформацією про алгоритм і
      сіль, необхідну для майбутньої перевірки пароля.
     </simpara>
     <para>
      <mediaobject>
       <alt>
        Порядок складових значення, що повертають функції password_hash і crypt:
        обраний алгоритм, опції алгоритму, використана сіль, загешований пароль.
       </alt>
       <imageobject>
        <imagedata fileref="en/faq/figures/crypt-text-rendered.svg" width="690" depth="192" format="SVG" />
       </imageobject>
      </mediaobject>
     </para>
    </answer>
   </qandaentry>
  </qandaset>
  
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
